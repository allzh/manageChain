package channel

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"testing"
)

// func TestJoinChannel(t *testing.T) {
// 	channelname := "testchannel1"
// 	peernodes := []*ServiceNode{
// 		&ServiceNode{
// 			ID:               "peer0_lily",
// 			Endpoint:         "192.168.9.36:31010",
// 			ExternalEndpoint: "192.168.9.36:31010",
// 			Public:           true,
// 		},
// 	}

// 	ordernodes := []*ServiceNode{
// 		&ServiceNode{
// 			ID:               "orderer0_lily",
// 			Endpoint:         "192.168.9.36:31020",
// 			ExternalEndpoint: "192.168.9.36:31020",
// 			Public:           true,
// 		},
// 		&ServiceNode{
// 			ID:               "orderer1_lily",
// 			Endpoint:         "192.168.9.36:31030",
// 			ExternalEndpoint: "192.168.9.36:31030",
// 			Public:           true,
// 		},
// 	}
// 	orgs := []*OrgInfo{
// 		&OrgInfo{
// 			OrgName:      "baas1",
// 			OrgMSP:       "baas1",
// 			MspID:        "baas1",
// 			PeerNodes:    peernodes,
// 			OrdererNodes: ordernodes,
// 		},
// 	}

// 	jcr := &JoinChannelRequest{
// 		Orgs:        orgs,
// 		ChannelName: channelname,
// 	}

// 	data, err := json.Marshal(jcr)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// 	wrt := bytes.NewBuffer(data)

// 	resp, err := http.Post("http://127.0.0.1:8080/channel/join", "application/json", wrt)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// 	ret, err := ioutil.ReadAll(resp.Body)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// 	t.Log(string(ret))
// }

func TestIdentity(t *testing.T) {
	peers := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.113:56051",
			ExternalEndpoint: "192.168.9.113:56051",
			Public:           true,
		},
		&ServiceNode{
			ID:               "peer1",
			Endpoint:         "192.168.9.113:56151",
			ExternalEndpoint: "192.168.9.113:56151",
			Public:           true,
		},
	}

	orderers := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.113:56050",
			ExternalEndpoint: "192.168.9.113:56050",
			Public:           true,
		},
	}
	orgs := []*OrgInfo{
		&OrgInfo{
			OrgName:      "org3",
			OrgMSP:       "org3",
			MspID:        "org3",
			PeerNodes:    peers,
			OrdererNodes: orderers,
		},
	}

	idreq := &IdentityRequest{
		Orgs: orgs,
	}

	data, err := json.Marshal(idreq)
	if err != nil {
		t.Fatal(err)
	}

	wrt := bytes.NewBuffer(data)
	fmt.Printf("wrt:%s", wrt)
	fmt.Printf("data:%s", data)
	resp, err := http.Post("http://127.0.0.1:8080/channel/identity", "application/json", wrt)

	if err != nil {
		t.Fatal(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}

	err = ioutil.WriteFile("newOrgIdentity", ret, os.ModePerm)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAddOrg(t *testing.T) {
	id, err := ioutil.ReadFile("newOrgIdentity")
	if err != nil {
		t.Fatal(err)
	}

	channelName := "channel1"
	peernodes := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.42:56051",
			ExternalEndpoint: "192.168.9.42:56051",
			Public:           true,
		},
	}

	ordernodes := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.42:56050",
			ExternalEndpoint: "192.168.9.42:56050",
			Public:           true,
		},
		&ServiceNode{
			ID:               "orderer1",
			Endpoint:         "192.168.9.43:57050",
			ExternalEndpoint: "192.168.9.43:57050",
			Public:           true,
		},
	}
	orgs := []*OrgInfo{
		&OrgInfo{
			OrgName:      "example.com",
			OrgMSP:       "example.com",
			MspID:        "example.com",
			PeerNodes:    peernodes,
			OrdererNodes: ordernodes,
		},
	}
	addOrgReq := &AddOrgRequest{}
	addOrgReq.Identity = id
	addOrgReq.ChannelName = channelName
	addOrgReq.Orgs = orgs
	data, err := json.Marshal(addOrgReq)
	if err != nil {
		t.Fatal(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://127.0.0.1:8080/channel/addorg", "application/json", wrt)
	if err != nil {
		t.Fatal(err)
	}

	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(ret))

}

func TestDeleteOrg(t *testing.T) {
	channelName := "channel1"
	peernodes := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0.org1",
			Endpoint:         "192.168.9.42:56051",
			ExternalEndpoint: "192.168.9.42:56051",
			Public:           true,
		},
	}

	ordernodes := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.42:56050",
			ExternalEndpoint: "192.168.9.42:56050",
			Public:           true,
		},
		&ServiceNode{
			ID:               "orderer1",
			Endpoint:         "192.168.9.43:57050",
			ExternalEndpoint: "192.168.9.43:57050",
			Public:           true,
		},
	}
	orgs := []*OrgInfo{
		&OrgInfo{
			OrgName:      "OrdererMSP1",
			OrgMSP:       "OrdererMSP1",
			MspID:        "OrdererMSP1",
			PeerNodes:    peernodes,
			OrdererNodes: ordernodes,
		},
	}
	delOrgReq := DeleteOrgRequest{}
	delOrgReq.ChannelName = channelName
	delOrgReq.Orgs = orgs
	delOrgReq.DelOrg = "OrdererMSP2"
	delOrgReq.DelOrderers = []string{"orderer1.example.com"}
	data, err := json.Marshal(delOrgReq)
	if err != nil {
		t.Fatal(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://127.0.0.1:8080/channel/deleteorg", "application/json", wrt)
	if err != nil {
		t.Fatal(err)
	}

	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(ret))
}

func TestGenCrypto(t *testing.T) {
	org1Peers := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.42:56051",
			ExternalEndpoint: "192.168.9.42:56051",
			Public:           true,
		},
		&ServiceNode{
			ID:               "peer1",
			Endpoint:         "192.168.9.42:56151",
			ExternalEndpoint: "192.168.9.42:56151",
			Public:           true,
		},
	}

	org1Orderers := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.42:56050",
			ExternalEndpoint: "192.168.9.42:56050",
			Public:           true,
		},
	}
	org2Peers := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.43:56051",
			ExternalEndpoint: "192.168.9.43:56051",
			Public:           true,
		},
		&ServiceNode{
			ID:               "peer1",
			Endpoint:         "192.168.9.43:56151",
			ExternalEndpoint: "192.168.9.43:56151",
			Public:           true,
		},
	}

	org2Orderers := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.43:56050",
			ExternalEndpoint: "192.168.9.43:56050",
			Public:           true,
		},
	}

	orgs := []*OrgInfo{
		&OrgInfo{
			OrgName:      "testorg1",
			OrgMSP:       "testorg1",
			MspID:        "testorg1",
			PeerNodes:    org1Peers,
			OrdererNodes: org1Orderers,
		},
		&OrgInfo{
			OrgName:      "testorg2",
			OrgMSP:       "testorg2",
			MspID:        "testorg2",
			PeerNodes:    org2Peers,
			OrdererNodes: org2Orderers,
		},
	}

	genCryptoreq := &GenCryptoRequest{
		Orgs: orgs,
	}

	data, err := json.Marshal(genCryptoreq)
	if err != nil {
		t.Fatal(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://127.0.0.1:8080/gencrypto", "application/json", wrt)

	if err != nil {
		t.Fatal(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(string(ret))
}

func TestGenGenesisBlock(t *testing.T) {
	org1Peers := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.42:56051",
			ExternalEndpoint: "192.168.9.42:56051",
			Public:           true,
		},
		&ServiceNode{
			ID:               "peer1",
			Endpoint:         "192.168.9.42:56151",
			ExternalEndpoint: "192.168.9.42:56151",
			Public:           true,
		},
	}

	org1Orderers := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.42:56050",
			ExternalEndpoint: "192.168.9.42:56050",
			Public:           true,
		},
	}
	org2Peers := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.43:56051",
			ExternalEndpoint: "192.168.9.43:56051",
			Public:           true,
		},
		&ServiceNode{
			ID:               "peer1",
			Endpoint:         "192.168.9.43:56151",
			ExternalEndpoint: "192.168.9.43:56151",
			Public:           true,
		},
	}

	org2Orderers := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.43:56050",
			ExternalEndpoint: "192.168.9.43:56050",
			Public:           true,
		},
	}

	orgs := []*OrgInfo{
		&OrgInfo{
			OrgName:      "testorg1",
			OrgMSP:       "testorg1",
			MspID:        "testorg1",
			PeerNodes:    org1Peers,
			OrdererNodes: org1Orderers,
		},
		&OrgInfo{
			OrgName:      "testorg2",
			OrgMSP:       "testorg2",
			MspID:        "testorg2",
			PeerNodes:    org2Peers,
			OrdererNodes: org2Orderers,
		},
	}
	kafkas := []string{
		"192.168.9.42:9092",
		"192.168.9.43:9093",
		"192.168.9.113:9094",
		"192.168.9.113:9095",
	}
	genGenesisBlockreq := &GenGenesisBlockRequest{
		Orgs:   orgs,
		Kafkas: kafkas,
	}

	data, err := json.Marshal(genGenesisBlockreq)
	if err != nil {
		t.Fatal(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://127.0.0.1:8080/gengenesisblock", "application/json", wrt)

	if err != nil {
		t.Fatal(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(string(ret))
}

func TestCreateChannel(t *testing.T) {
	org1Peers := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.42:56051",
			ExternalEndpoint: "192.168.9.42:56051",
			Public:           true,
		},
		&ServiceNode{
			ID:               "peer1",
			Endpoint:         "192.168.9.42:56151",
			ExternalEndpoint: "192.168.9.42:56151",
			Public:           true,
		},
	}

	org1Orderers := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.42:56050",
			ExternalEndpoint: "192.168.9.42:56050",
			Public:           true,
		},
	}
	org2Peers := []*ServiceNode{
		&ServiceNode{
			ID:               "peer0",
			Endpoint:         "192.168.9.43:56051",
			ExternalEndpoint: "192.168.9.43:56051",
			Public:           true,
		},
		&ServiceNode{
			ID:               "peer1",
			Endpoint:         "192.168.9.43:56151",
			ExternalEndpoint: "192.168.9.43:56151",
			Public:           true,
		},
	}

	org2Orderers := []*ServiceNode{
		&ServiceNode{
			ID:               "orderer0",
			Endpoint:         "192.168.9.43:56050",
			ExternalEndpoint: "192.168.9.43:56050",
			Public:           true,
		},
	}

	orgs := []*OrgInfo{
		&OrgInfo{
			OrgName:      "testorg1",
			OrgMSP:       "testorg1",
			MspID:        "testorg1",
			PeerNodes:    org1Peers,
			OrdererNodes: org1Orderers,
		},
		&OrgInfo{
			OrgName:      "testorg2",
			OrgMSP:       "testorg2",
			MspID:        "testorg2",
			PeerNodes:    org2Peers,
			OrdererNodes: org2Orderers,
		},
	}
	channelName := "channel1"
	ccr := &NewCreateChannelRequest{
		Orgs:        orgs,
		ChannelName: channelName,
	}

	data, err := json.Marshal(ccr)
	if err != nil {
		t.Fatal(err)
	}
	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://127.0.0.1:8080/channel/create", "application/json", wrt)
	if err != nil {
		t.Fatal(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(ret))
}
